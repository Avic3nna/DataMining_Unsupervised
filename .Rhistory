library(rgl)
plot3d(x[,1], x[,2], x[,3], col=x[,4])
x11()
plot(x[,1], x[,2])
feat_select = c(1,2,3,4) #4 is labels
all_feat_scoeff = silhouette_coeff(x[,feat_select])
print(all_feat_scoeff)
#without Z
feat_select = c(1,2,4)
not_z_scoeff = silhouette_coeff(x[,feat_select])
not_z_entr = entropy_2d(x[,feat_select])
not_z_hopk = hopkins_stat(x[,feat_select])
print(not_z_scoeff)
print(not_z_entr)
print(not_z_hopk)
#without Y
feat_select = c(1,3,4)
not_y_scoeff = silhouette_coeff(x[,feat_select])
not_y_entr = entropy_2d(x[,feat_select])
not_y_hopk = hopkins_stat(x[,feat_select])
print(not_y_scoeff)
print(not_y_entr)
print(not_y_hopk)
#without X
feat_select = c(2,3,4)
not_x_scoeff = silhouette_coeff(x[,feat_select])
not_x_entr = entropy_2d(x[,feat_select])
not_x_hopk = hopkins_stat(x[,feat_select])
print(not_x_scoeff)
print(not_x_entr)
print(not_x_hopk)
# load("./practice_3/Data/JGData.RData")
# print(entropy_2d(x))
not_z_hopk = hopkins_stat(x[,feat_select])
source("./Own functions/hopkins-stat-fcn.R")
not_z_hopk = hopkins_stat(x[,feat_select])
rm(list=ls())
set.seed(1337)
root_path = "G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730"
setwd(root_path)
source("./Own functions/silhouette-coeff-fcn.R")
source("./Own functions/entropy-fcn.R")
source("./Own functions/hopkins-stat-fcn.R")
load("./practice_3/Data/3gaussiandata_2.RData")
library(rgl)
plot3d(x[,1], x[,2], x[,3], col=x[,4])
x11()
plot(x[,1], x[,2])
feat_select = c(1,2,3,4) #4 is labels
all_feat_scoeff = silhouette_coeff(x[,feat_select])
print(all_feat_scoeff)
#without Z
feat_select = c(1,2,4)
not_z_scoeff = silhouette_coeff(x[,feat_select])
not_z_entr = entropy_2d(x[,feat_select])
not_z_hopk = hopkins_stat(x[,feat_select])
print(not_z_scoeff)
print(not_z_entr)
print(not_z_hopk)
#without Y
feat_select = c(1,3,4)
not_y_scoeff = silhouette_coeff(x[,feat_select])
not_y_entr = entropy_2d(x[,feat_select])
not_y_hopk = hopkins_stat(x[,feat_select])
print(not_y_scoeff)
print(not_y_entr)
print(not_y_hopk)
#without X
feat_select = c(2,3,4)
not_x_scoeff = silhouette_coeff(x[,feat_select])
not_x_entr = entropy_2d(x[,feat_select])
not_x_hopk = hopkins_stat(x[,feat_select])
print(not_x_scoeff)
print(not_x_entr)
print(not_x_hopk)
# load("./practice_3/Data/JGData.RData")
# print(entropy_2d(x))
no_label_data=x[,-ncol(x)]
print(n)
n=150
print(n)
#find range of dataset for the uniform distrib.
range_d1 = range(no_label_data[,1])
range_d2 = range(no_label_data[,2])
runif_d1 = runif(n, min = range_d1[1], max = range_d1[2])
runif_d2 = runif(n, min = range_d2[1], max = range_d2[2])
unif_data = matrix(c(runif_d1, runif_d2), ncol=2)
unif_data = data.frame(unif_data)
#https://stackoverflow.com/questions/8273313/sample-random-rows-in-dataframe
sample_X = no_label_data[sample(nrow(no_label_data), n), ]
rand_unif = unif_data[,-ncol(unif_data)]
length(rand_unif)
rm(list=ls())
set.seed(1337)
root_path = "G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730"
setwd(root_path)
source("./Own functions/silhouette-coeff-fcn.R")
source("./Own functions/entropy-fcn.R")
source("./Own functions/hopkins-stat-fcn.R")
load("./practice_3/Data/3gaussiandata_2.RData")
library(rgl)
plot3d(x[,1], x[,2], x[,3], col=x[,4])
x11()
plot(x[,1], x[,2])
feat_select = c(1,2,3,4) #4 is labels
all_feat_scoeff = silhouette_coeff(x[,feat_select])
print(all_feat_scoeff)
#without Z
feat_select = c(1,2,4)
not_z_scoeff = silhouette_coeff(x[,feat_select])
not_z_entr = entropy_2d(x[,feat_select])
not_z_hopk = hopkins_stat(x[,feat_select])
print(not_z_scoeff)
print(not_z_entr)
print(not_z_hopk)
#without Y
feat_select = c(1,3,4)
not_y_scoeff = silhouette_coeff(x[,feat_select])
not_y_entr = entropy_2d(x[,feat_select])
not_y_hopk = hopkins_stat(x[,feat_select])
print(not_y_scoeff)
print(not_y_entr)
print(not_y_hopk)
#without X
feat_select = c(2,3,4)
not_x_scoeff = silhouette_coeff(x[,feat_select])
not_x_entr = entropy_2d(x[,feat_select])
not_x_hopk = hopkins_stat(x[,feat_select])
print(not_x_scoeff)
print(not_x_entr)
print(not_x_hopk)
# load("./practice_3/Data/JGData.RData")
# print(entropy_2d(x))
rm(list=ls())
set.seed(1337)
root_path = "G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730"
setwd(root_path)
source("./Own functions/silhouette-coeff-fcn.R")
source("./Own functions/entropy-fcn.R")
source("./Own functions/hopkins-stat-fcn.R")
load("./practice_3/Data/3gaussiandata_2.RData")
library(rgl)
plot3d(x[,1], x[,2], x[,3], col=x[,4])
x11()
plot(x[,1], x[,2])
feat_select = c(1,2,3,4) #4 is labels
all_feat_scoeff = silhouette_coeff(x[,feat_select])
print(all_feat_scoeff)
#without Z
feat_select = c(1,2,4)
not_z_scoeff = silhouette_coeff(x[,feat_select])
not_z_entr = entropy_2d(x[,feat_select])
not_z_hopk = hopkins_stat(x[,feat_select])
print(not_z_scoeff)
print(not_z_entr)
print(not_z_hopk)
#without Y
feat_select = c(1,3,4)
not_y_scoeff = silhouette_coeff(x[,feat_select])
not_y_entr = entropy_2d(x[,feat_select])
not_y_hopk = hopkins_stat(x[,feat_select])
print(not_y_scoeff)
print(not_y_entr)
print(not_y_hopk)
#without X
feat_select = c(2,3,4)
not_x_scoeff = silhouette_coeff(x[,feat_select])
not_x_entr = entropy_2d(x[,feat_select])
not_x_hopk = hopkins_stat(x[,feat_select])
print(not_x_scoeff)
print(not_x_entr)
print(not_x_hopk)
# load("./practice_3/Data/JGData.RData")
# print(entropy_2d(x))
warnings()
no_label_data = x[.1:3]
n=150
print(n)
#find range of dataset for the uniform distrib.
range_d1 = range(no_label_data[,1])
no_label_data = x[,1:3]
print(n)
#find range of dataset for the uniform distrib.
range_d1 = range(no_label_data[,1])
range_d2 = range(no_label_data[,2])
runif_d1 = runif(n, min = range_d1[1], max = range_d1[2])
runif_d2 = runif(n, min = range_d2[1], max = range_d2[2])
unif_data = matrix(c(runif_d1, runif_d2), ncol=2)
unif_data = data.frame(unif_data)
View(unif_data)
unif_data = matrix(c(runif_d1, runif_d2), ncol=2)
unif_data = matrix(c(runif_d1, runif_d2), ncol=2)
View(unif_data)
rm(list=ls())
set.seed(1337)
root_path = "G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730"
setwd(root_path)
source("./Own functions/silhouette-coeff-fcn.R")
source("./Own functions/entropy-fcn.R")
source("./Own functions/hopkins-stat-fcn.R")
load("./practice_3/Data/3gaussiandata_2.RData")
library(rgl)
plot3d(x[,1], x[,2], x[,3], col=x[,4])
x11()
plot(x[,1], x[,2])
feat_select = c(1,2,3,4) #4 is labels
all_feat_scoeff = silhouette_coeff(x[,feat_select])
print(all_feat_scoeff)
#without Z
feat_select = c(1,2,4)
not_z_scoeff = silhouette_coeff(x[,feat_select])
not_z_entr = entropy_2d(x[,feat_select])
not_z_hopk = hopkins_stat(x[,feat_select])
print(not_z_scoeff)
print(not_z_entr)
print(not_z_hopk)
#without Y
feat_select = c(1,3,4)
not_y_scoeff = silhouette_coeff(x[,feat_select])
not_y_entr = entropy_2d(x[,feat_select])
not_y_hopk = hopkins_stat(x[,feat_select])
print(not_y_scoeff)
print(not_y_entr)
print(not_y_hopk)
#without X
feat_select = c(2,3,4)
not_x_scoeff = silhouette_coeff(x[,feat_select])
not_x_entr = entropy_2d(x[,feat_select])
not_x_hopk = hopkins_stat(x[,feat_select])
print(not_x_scoeff)
print(not_x_entr)
print(not_x_hopk)
# load("./practice_3/Data/JGData.RData")
# print(entropy_2d(x))
rm(list=ls())
set.seed(1337)
root_path = "G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730"
setwd(root_path)
source("./Own functions/silhouette-coeff-fcn.R")
source("./Own functions/entropy-fcn.R")
source("./Own functions/hopkins-stat-fcn.R")
load("./practice_3/Data/3gaussiandata_2.RData")
library(rgl)
plot3d(x[,1], x[,2], x[,3], col=x[,4])
x11()
plot(x[,1], x[,2])
feat_select = c(1,2,3,4) #4 is labels
all_feat_scoeff = silhouette_coeff(x[,feat_select])
print(all_feat_scoeff)
#without Z
feat_select = c(1,2,4)
not_z_scoeff = silhouette_coeff(x[,feat_select])
not_z_entr = entropy_2d(x[,feat_select])
not_z_hopk = hopkins_stat(x[,feat_select])
print(not_z_scoeff)
print(not_z_entr)
print(not_z_hopk)
#without Y
feat_select = c(1,3,4)
not_y_scoeff = silhouette_coeff(x[,feat_select])
not_y_entr = entropy_2d(x[,feat_select])
not_y_hopk = hopkins_stat(x[,feat_select])
print(not_y_scoeff)
print(not_y_entr)
print(not_y_hopk)
#without X
feat_select = c(2,3,4)
not_x_scoeff = silhouette_coeff(x[,feat_select])
not_x_entr = entropy_2d(x[,feat_select])
not_x_hopk = hopkins_stat(x[,feat_select])
print(not_x_scoeff)
print(not_x_entr)
print(not_x_hopk)
# load("./practice_3/Data/JGData.RData")
# print(entropy_2d(x))
warnings()
no_label_data = x[,1:3]
no_label_data = x[,1:2]
print(n)
#find range of dataset for the uniform distrib.
range_d1 = range(no_label_data[,1])
n=150
print(n)
#find range of dataset for the uniform distrib.
range_d1 = range(no_label_data[,1])
range_d2 = range(no_label_data[,2])
runif_d1 = runif(n, min = range_d1[1], max = range_d1[2])
runif_d2 = runif(n, min = range_d2[1], max = range_d2[2])
rand_unif = matrix(c(runif_d1, runif_d2), ncol=2)
#https://stackoverflow.com/questions/8273313/sample-random-rows-in-dataframe
sample_X = no_label_data[sample(nrow(no_label_data), n), ]
nn_frame_pi = matrix(NaN, length(X[,1]), 1) #just 1 column with values
#https://stackoverflow.com/questions/8273313/sample-random-rows-in-dataframe
sample_X = no_label_data[sample(nrow(no_label_data), n), ]
nn_frame_pi = matrix(NaN, length(no_label_data[,1]), 1) #just 1 column with values
nn_frame_qi = matrix(NaN, length(no_label_data[,1]), 1) #just 1 column with values
min_dist_pi_X = matrix(NaN, length(sample_X[,1]))
min_dist_qi_X = matrix(NaN, length(rand_unif[,1]))
for (i in seq(along = 1:length(sample_X[,1]))){
for(j in seq(along = 1:length(no_label_data[,1]))){
# distance from sample of X to nearest X
pi_X_dist = minkowsky(sample_X[i,],no_label_data[j,],2) #eucl. distance
if(pi_X_dist != 0){                         #don't want same sample dist
nn_frame_pi[j] = pi_X_dist
}
# distance from random uniform in range of X to nearest X
qi_X_dist = minkowsky(rand_unif[i,],no_label_data[j,],2) #eucl. distance
nn_frame_qi[j] = qi_X_dist
}
min_dist_pi_X[i] = min(na.omit(nn_frame_pi))
min_dist_qi_X[i] = min(na.omit(nn_frame_qi))
}
H = sum(min_dist_qi_X)/(sum(min_dist_pi_X) + sum(min_dist_qi_X))
return(H)
rm(list=ls())
set.seed(1337)
root_path = "G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730"
setwd(root_path)
source("./Own functions/silhouette-coeff-fcn.R")
source("./Own functions/entropy-fcn.R")
source("./Own functions/hopkins-stat-fcn.R")
load("./practice_3/Data/3gaussiandata_2.RData")
library(rgl)
plot3d(x[,1], x[,2], x[,3], col=x[,4])
x11()
plot(x[,1], x[,2])
feat_select = c(1,2,3,4) #4 is labels
all_feat_scoeff = silhouette_coeff(x[,feat_select])
print(all_feat_scoeff)
#without Z
feat_select = c(1,2,4)
not_z_scoeff = silhouette_coeff(x[,feat_select])
not_z_entr = entropy_2d(x[,feat_select])
not_z_hopk = hopkins_stat(x[,feat_select])
print(not_z_scoeff)
print(not_z_entr)
print(not_z_hopk)
#without Y
feat_select = c(1,3,4)
not_y_scoeff = silhouette_coeff(x[,feat_select])
not_y_entr = entropy_2d(x[,feat_select])
not_y_hopk = hopkins_stat(x[,feat_select])
print(not_y_scoeff)
print(not_y_entr)
print(not_y_hopk)
#without X
feat_select = c(2,3,4)
not_x_scoeff = silhouette_coeff(x[,feat_select])
not_x_entr = entropy_2d(x[,feat_select])
not_x_hopk = hopkins_stat(x[,feat_select])
print(not_x_scoeff)
print(not_x_entr)
print(not_x_hopk)
# load("./practice_3/Data/JGData.RData")
# print(entropy_2d(x))
rm(list=ls())
set.seed(1337)
root_path = "G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730"
setwd(root_path)
source("./Own functions/silhouette-coeff-fcn.R")
source("./Own functions/entropy-fcn.R")
source("./Own functions/hopkins-stat-fcn.R")
load("./practice_3/Data/3gaussiandata_2.RData")
library(rgl)
plot3d(x[,1], x[,2], x[,3], col=x[,4])
x11()
plot(x[,1], x[,2])
feat_select = c(1,2,3,4) #4 is labels
all_feat_scoeff = silhouette_coeff(x[,feat_select])
print(all_feat_scoeff)
#without Z
feat_select = c(1,2,4)
not_z_scoeff = silhouette_coeff(x[,feat_select])
not_z_entr = entropy_2d(x[,feat_select])
not_z_hopk = hopkins_stat(x[,feat_select])
print(not_z_scoeff)
print(not_z_entr)
print(not_z_hopk)
#without Y
feat_select = c(1,3,4)
not_y_scoeff = silhouette_coeff(x[,feat_select])
not_y_entr = entropy_2d(x[,feat_select])
not_y_hopk = hopkins_stat(x[,feat_select])
print(not_y_scoeff)
print(not_y_entr)
print(not_y_hopk)
#without X
feat_select = c(2,3,4)
not_x_scoeff = silhouette_coeff(x[,feat_select])
not_x_entr = entropy_2d(x[,feat_select])
not_x_hopk = hopkins_stat(x[,feat_select])
print(not_x_scoeff)
print(not_x_entr)
print(not_x_hopk)
# load("./practice_3/Data/JGData.RData")
# print(entropy_2d(x))
rm(list=ls())
set.seed(123)
root_path = "G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730"
setwd(root_path)
source("./Own functions/silhouette-coeff-fcn.R")
source("./Own functions/entropy-fcn.R")
source("./Own functions/hopkins-stat-fcn.R")
load("./practice_3/Data/3gaussiandata_2.RData")
library(rgl)
plot3d(x[,1], x[,2], x[,3], col=x[,4])
x11()
plot(x[,1], x[,2])
feat_select = c(1,2,3,4) #4 is labels
all_feat_scoeff = silhouette_coeff(x[,feat_select])
print(all_feat_scoeff)
#without Z
feat_select = c(1,2,4)
not_z_scoeff = silhouette_coeff(x[,feat_select])
not_z_entr = entropy_2d(x[,feat_select])
not_z_hopk = hopkins_stat(x[,feat_select])
print(not_z_scoeff)
print(not_z_entr)
print(not_z_hopk)
#without Y
feat_select = c(1,3,4)
not_y_scoeff = silhouette_coeff(x[,feat_select])
not_y_entr = entropy_2d(x[,feat_select])
not_y_hopk = hopkins_stat(x[,feat_select])
print(not_y_scoeff)
print(not_y_entr)
print(not_y_hopk)
#without X
feat_select = c(2,3,4)
not_x_scoeff = silhouette_coeff(x[,feat_select])
not_x_entr = entropy_2d(x[,feat_select])
not_x_hopk = hopkins_stat(x[,feat_select])
print(not_x_scoeff)
print(not_x_entr)
print(not_x_hopk)
# load("./practice_3/Data/JGData.RData")
# print(entropy_2d(x))
library(factoextra)
# Compute Hopkins statistic for iris dataset
res <- get_clust_tendency(x[,feat_select], n = 150, graph = FALSE)
res$hopkins_stat
feat_select = c(1,2,4)
library(factoextra)
# Compute Hopkins statistic for iris dataset
res <- get_clust_tendency(x[,feat_select], n = 150, graph = FALSE)
res$hopkins_stat
feat_select = c(2,3,4)
library(factoextra)
# Compute Hopkins statistic for iris dataset
res <- get_clust_tendency(x[,feat_select], n = 150, graph = FALSE)
res$hopkins_stat
feat_select = c(1,3,4)
library(factoextra)
# Compute Hopkins statistic for iris dataset
res <- get_clust_tendency(x[,feat_select], n = 150, graph = FALSE)
res$hopkins_stat
rm(list=ls())
set.seed(1337)
root_path = "G:/My Drive/1. EIT Digital master/Estland/Semester 1/Data mining/data-mining-iti8730"
setwd(root_path)
source("./Own functions/silhouette-coeff-fcn.R")
source("./Own functions/entropy-fcn.R")
source("./Own functions/hopkins-stat-fcn.R")
load("./practice_3/Data/3gaussiandata.RData")
library(rgl)
plot3d(x[,1], x[,2], x[,3], col=x[,4])
x11()
plot(x[,1], x[,2])
feat_select = c(1,2,3,4) #4 is labels
all_feat_scoeff = silhouette_coeff(x[,feat_select])
print(all_feat_scoeff)
#without Z
feat_select = c(1,2,4)
not_z_scoeff = silhouette_coeff(x[,feat_select])
not_z_entr = entropy_2d(x[,feat_select])
not_z_hopk = hopkins_stat(x[,feat_select])
print(not_z_scoeff)
print(not_z_entr)
print(not_z_hopk)
#without Y
feat_select = c(1,3,4)
not_y_scoeff = silhouette_coeff(x[,feat_select])
not_y_entr = entropy_2d(x[,feat_select])
not_y_hopk = hopkins_stat(x[,feat_select])
print(not_y_scoeff)
print(not_y_entr)
print(not_y_hopk)
#without X
feat_select = c(2,3,4)
not_x_scoeff = silhouette_coeff(x[,feat_select])
not_x_entr = entropy_2d(x[,feat_select])
not_x_hopk = hopkins_stat(x[,feat_select])
print(not_x_scoeff)
print(not_x_entr)
print(not_x_hopk)
# load("./practice_3/Data/JGData.RData")
# print(entropy_2d(x))
feat_select = c(1,2,4)
library(factoextra)
# Compute Hopkins statistic for iris dataset
res <- get_clust_tendency(x[,feat_select], n = 150, graph = FALSE)
res$hopkins_stat
feat_select = c(2,3,4)
library(factoextra)
# Compute Hopkins statistic for iris dataset
res <- get_clust_tendency(x[,feat_select], n = 150, graph = FALSE)
res$hopkins_stat
feat_select = c(1,3,4)
library(factoextra)
# Compute Hopkins statistic for iris dataset
res <- get_clust_tendency(x[,feat_select], n = 150, graph = FALSE)
res$hopkins_stat
